//Select Sentinel- 2 backscatter data
var sentinel = ee.ImageCollection('COPERNICUS/S2')
                  .filterDate('2019-01-01', '2019-12-31');
//Compute the red/NIR ratio
var addratio = function(image) {
  var ratioing = (image.select(['B4']).divide(image.select(['B8A'])).rename('ratio'));
  return image.addBands(ratioing);
};
var withratio = sentinel.map(addratio);

var redNIR = withratio.select('ratio');

// Define a chart for reflectance data
var series1 = ui.Chart.image.series(
	redNIR, geometry, ee.Reducer.mean(), 500);
print(series1);
//Select the Sentinel- 1 backscatter data and filter
var imgVV = ee.ImageCollection('COPERNICUS/S1_GRD')
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
        .filter(ee.Filter.eq('instrumentMode', 'IW'))
        .select('VV')
        .map(function(image) {
          var edge = image.lt(-30.0);
          var maskedImage = image.mask().and(edge.not());
          return image.updateMask(maskedImage);
        });

var desc = imgVV.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
var asc = imgVV.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));

var before = ee.Filter.date('2019-01-01', '2019-12-31');
var ascending = ee.Filter.date('2019-01-01', '2019-12-31');

var descplot = desc.filter(before);
var ascplot = desc.filter(ascending);

// Define a chart for backscatter data
var series2 = ui.Chart.image.series(
	ascplot, geometry, ee.Reducer.mean(), 500);
print(series2);

//Select the CHIRPS rainfall data and filter
var collection = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY').select('precipitation');
var filtered = collection.filterDate('2019-02-07', '2019-02-08');
//Define a chart for rainfall data, averaging rainfall over the study area for a time-series
var series3 = ui.Chart.image.doySeries(filtered, geometry, ee.Reducer.max(), 10);
 	series3.setOptions({
  title: 'Rainfall per day, 2015',
  vAxis: {title: 'Volume mm/day'},
});
print(series3)
//Define an area for the chart
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
    	[[[38.10, 26.41],
      	[38.10, 26.87],
      	[37.625, 26.87],
      	[37.625, 26.41]]]);
